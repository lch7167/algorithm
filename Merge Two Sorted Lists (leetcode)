//
You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.

Example 1:
Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]
//

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        s1=[]
        s2=[]
        while list1: 
            s1.append(list1.val)
            list1=list1.next
            
        while list2:
            s2.append(list2.val)
            list2=list2.next
            
        arr= sorted(s1+s2)
        arr.reverse()
        head=None
        for i in arr: #arr을 ListNode형태로 저장
            n=ListNode(i)
            n.next=head
            head=n
        return head
