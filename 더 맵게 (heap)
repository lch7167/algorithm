//
매운 것을 좋아하는 Leo는 모든 음식의 스코빌 지수를 K 이상으로 만들고 싶습니다. 
모든 음식의 스코빌 지수를 K 이상으로 만들기 위해 Leo는 스코빌 지수가 가장 낮은 두 개의 음식을 아래와 같이 특별한 방법으로 섞어 새로운 음식을 만듭니다.

섞은 음식의 스코빌 지수 = 가장 맵지 않은 음식의 스코빌 지수 + (두 번째로 맵지 않은 음식의 스코빌 지수 * 2)

Leo는 모든 음식의 스코빌 지수가 K 이상이 될 때까지 반복하여 섞습니다.
Leo가 가진 음식의 스코빌 지수를 담은 배열 scoville과 원하는 스코빌 지수 K가 주어질 때, 
모든 음식의 스코빌 지수를 K 이상으로 만들기 위해 섞어야 하는 최소 횟수를 return 하도록 solution 함수를 작성해주세요.
모든 음식의 스코빌 지수를 K 이상으로 만들 수 없는 경우에는 -1을 return 합니다.
//


import heapq

def solution(scoville, K):
    answer = 0
    heap = []
    for s in scoville: #스코빌지수 힙으로 저장
        heapq.heappush(heap, s)

    while heap[0] < K: #가장 맵지 않은 음식의 스코빌이 k이상이 될 때 까지
        if len(heap) <= 2: #힙의 요소가 2개미만이거나 둘의 합이 스코빌지수 이하일 때 -1 리턴
            if len(heap) == 2: #요소가 2개고 합이 스코빌지수 이상이면 섞은 횟수 1 증가
                if heap[0] + heap[1]*2 >= K:
                    return answer + 1
            return -1
        #요소가 3개 이상인 경우 가장 맵지 않은 음식과 두 번째로 맵지않은 음식을 pop하고 둘을 섞은 음식 스코빌 지수 계산 후 push
        s1 = heapq.heappop(heap)
        s2 = heapq.heappop(heap)
        heapq.heappush(heap, s1+s2*2)
        answer += 1 #섞은 횟수 증가

    return answer
