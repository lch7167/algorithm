//
You are given two non-empty linked lists representing two non-negative integers. 
The digits are stored in reverse order, and each of their nodes contains a single digit. 
Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.
//

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        s1=''
        s2=''
        while l1: #l1 listnode를 str리스트 형태로 저장
            s1+=str(l1.val) 
            l1=l1.next
        while l2: #l2 listnode를 str리스트 형태로 저장
            s2+=str(l2.val)
            l2=l2.next
        s1=int(s1[::-1]) #s1 뒤집고 int형변환
        s2=int(s2[::-1]) #s2 뒤집고 int형변환
        total= str(s1+s2) #int형 s1 s2더하고 str형변환
        print(total)
        
        head=None
        for i in total: #total을 ListNode형태로 저장
            n=ListNode(i)
            n.next=head
            head=n
            
        return head
        
