//
Given a sorted array of distinct integers and a target value, return the index if the target is found. 
If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

Example 1:
Input: nums = [1,3,5,6], target = 5
Output: 2

Example 2:
Input: nums = [1,3,5,6], target = 2
Output: 1

Example 3:
Input: nums = [1,3,5,6], target = 7
Output: 4
//


class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        if target in nums: #타겟이 nums에 있으면
            return nums.index(target) #타겟의 인덱스 반환
        else: #타겟이 nums에 없으면
            nums.append(target) #nums에 target을 추가하고 정렬 후 target의 인덱스 반환
            nums.sort()
            return nums.index(target)
